Test on __linux__ is wrong as the behaviour does not depends on the kernel
but on the userland, that is GNU libc, tested by __GLIBC__. Test on 
__FreeBSD__ and __NetBSD__ are correct though as they represent both the 
kernel and the userland.

The patch does not remove __linux__ in the patch to be as conservative as
possible.

--- a/kstars/kstars/htmesh/SpatialGeneral.h
+++ b/kstars/kstars/htmesh/SpatialGeneral.h
@@ -80,7 +80,7 @@ typedef unsigned long long	uint64;
 
 // emulate the standard bool type where not supported by compiler
 
-#  if !defined(SXGENERAL_H) && !defined(__sgi) && !defined(__linux__) && !defined(_WIN32) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__)
+#  if !defined(SXGENERAL_H) && !defined(__sgi) && !defined(__linux__) && !defined(_WIN32) && !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__GLIBC__)
 #    ifdef __unix__
 /*
  * The following ifndef must ALWAYS be present since C++ may use
